import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { 
  Select, 
  SelectContent, 
  SelectGroup, 
  SelectItem, 
  SelectLabel, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import {
  Eye,
  EyeOff,
  Lock,
  Unlock,
  Plus,
  RefreshCw,
  Key,
  AlertTriangle,
  Copy,
  Check,
  Trash2,
  Edit,
  Search,
  Filter,
  KeyRound,
  Sparkles,
  Layers,
  Wallet,
  Shield,
  Bell,
  Mail,
  Database,
  FileText,
  CreditCard
} from "lucide-react";

// Schema for creating/updating a system secret
const systemSecretSchema = z.object({
  keyName: z.string().min(1, "Key name is required"),
  value: z.string().min(1, "Value is required"),
  description: z.string().optional(),
  category: z.string().min(1, "Category is required"),
  isEncrypted: z.boolean().default(false),
});

type SystemSecret = {
  id: number;
  keyName: string;
  value: string;
  description: string | null;
  category: string;
  lastUpdatedAt: string;
  updatedById: number | null;
  isEncrypted: boolean;
};

type SecretFormData = z.infer<typeof systemSecretSchema>;

// Icons for different secret categories
const categoryIcons: Record<string, JSX.Element> = {
  "payment": <Wallet className="h-5 w-5" />,
  "blockchain": <Layers className="h-5 w-5" />,
  "notifications": <Bell className="h-5 w-5" />,
  "email": <Mail className="h-5 w-5" />,
  "security": <Shield className="h-5 w-5" />,
  "storage": <Database className="h-5 w-5" />,
  "api": <Key className="h-5 w-5" />,
  "other": <FileText className="h-5 w-5" />,
};

// Helper function to get category icon
const getCategoryIcon = (category: string) => {
  return categoryIcons[category.toLowerCase()] || <Key className="h-5 w-5" />;
};

// Predefined categories
const predefinedCategories = [
  "payment", 
  "blockchain", 
  "notifications", 
  "email", 
  "security", 
  "storage", 
  "api", 
  "other"
];

// Predefined secrets that can be quickly added
const predefinedSecrets = [
  {
    keyName: "LUKE_WALLET_KEY",
    value: "",
    description: "Private key for Luke's wallet used for blockchain operations. Required for token withdrawals and contract funding.",
    category: "blockchain",
    isEncrypted: true
  },
  {
    keyName: "BSCSCAN_API_KEY",
    value: "",
    description: "API key for BscScan to fetch token transaction data",
    category: "blockchain",
    isEncrypted: false
  },
  {
    keyName: "STRIPE_SECRET_KEY",
    value: "",
    description: "Secret key for Stripe payment processing",
    category: "payment",
    isEncrypted: true
  }
];

export default function SystemSecrets() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [secretToEdit, setSecretToEdit] = useState<SystemSecret | null>(null);
  const [showValues, setShowValues] = useState<Record<number, boolean>>({});
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [copyStatus, setCopyStatus] = useState<Record<number, boolean>>({});

  // Query to fetch all system secrets
  const { data: secrets = [], isLoading, error, refetch } = useQuery({
    queryKey: ["/api/admin/system-secrets"],
    refetchOnWindowFocus: false,
  });

  // Query to fetch all categories
  const { data: categories = [] } = useQuery({
    queryKey: ["/api/admin/system-secrets/categories"],
    refetchOnWindowFocus: false,
  });

  // Form for adding a new secret
  const addForm = useForm<SecretFormData>({
    resolver: zodResolver(systemSecretSchema),
    defaultValues: {
      keyName: "",
      value: "",
      description: "",
      category: "",
      isEncrypted: false,
    },
  });

  // Form for editing an existing secret
  const editForm = useForm<SecretFormData>({
    resolver: zodResolver(systemSecretSchema),
    defaultValues: {
      keyName: "",
      value: "",
      description: "",
      category: "",
      isEncrypted: false,
    },
  });

  // Reset the add form when the modal opens/closes
  useEffect(() => {
    if (!isAddModalOpen) {
      addForm.reset();
    }
  }, [isAddModalOpen, addForm]);

  // Set up the edit form when a secret is selected for editing
  useEffect(() => {
    if (secretToEdit) {
      // For security, we need to fetch the actual secret value
      apiRequest(`/api/admin/system-secrets/by-key/${secretToEdit.keyName}`, {
        method: "GET"
      } as any)
        .then(response => {
          const data = response as any as SystemSecret;
          editForm.reset({
            keyName: data.keyName,
            value: data.value,
            description: data.description || "",
            category: data.category,
            isEncrypted: data.isEncrypted,
          });
        })
        .catch(err => {
          toast({
            title: "Error",
            description: "Failed to fetch secret details for editing.",
            variant: "destructive",
          });
          console.error("Error fetching secret details:", err);
        });
    }
  }, [secretToEdit, editForm, toast]);

  // Mutation for creating a new secret
  const createMutation = useMutation({
    mutationFn: (data: SecretFormData) => 
      apiRequest("/api/admin/system-secrets", {
        method: "POST",
        data,
      } as any),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/system-secrets"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/system-secrets/categories"] });
      setIsAddModalOpen(false);
      toast({
        title: "Success",
        description: "Secret created successfully!",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create secret. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Mutation for updating an existing secret
  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<SecretFormData> }) =>
      apiRequest(`/api/admin/system-secrets/${id}`, {
        method: "PUT",
        data,
      } as any),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/system-secrets"] });
      setIsEditModalOpen(false);
      setSecretToEdit(null);
      toast({
        title: "Success",
        description: "Secret updated successfully!",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update secret. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Mutation for deleting a secret
  const deleteMutation = useMutation({
    mutationFn: (id: number) =>
      apiRequest(`/api/admin/system-secrets/${id}`, {
        method: "DELETE",
      } as any),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/system-secrets"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/system-secrets/categories"] });
      toast({
        title: "Success",
        description: "Secret deleted successfully!",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to delete secret. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Fill form with predefined secret template
  const fillWithPredefinedSecret = (secretTemplate: SecretFormData) => {
    addForm.reset(secretTemplate);
  };

  // Handle adding a new secret
  const onAddSubmit = (data: SecretFormData) => {
    createMutation.mutate(data);
  };

  // Handle editing an existing secret
  const onEditSubmit = (data: SecretFormData) => {
    if (!secretToEdit) return;
    
    updateMutation.mutate({
      id: secretToEdit.id,
      data,
    });
  };

  // Handle deleting a secret
  const handleDelete = (id: number) => {
    if (confirm("Are you sure you want to delete this secret? This action cannot be undone.")) {
      deleteMutation.mutate(id);
    }
  };

  // Toggle visibility of a secret value
  const toggleValueVisibility = (id: number) => {
    setShowValues(prev => ({
      ...prev,
      [id]: !prev[id],
    }));
  };

  // Copy a value to clipboard
  const copyToClipboard = (text: string, id: number) => {
    navigator.clipboard.writeText(text).then(
      () => {
        setCopyStatus(prev => ({ ...prev, [id]: true }));
        setTimeout(() => {
          setCopyStatus(prev => ({ ...prev, [id]: false }));
        }, 2000);
      },
      () => {
        toast({
          title: "Error",
          description: "Failed to copy to clipboard. Please try again.",
          variant: "destructive",
        });
      }
    );
  };

  // Filter secrets based on search query and selected category
  const filteredSecrets = (Array.isArray(secrets) ? secrets : []).filter((secret: SystemSecret) => {
    const matchesSearch = searchQuery === "" || 
      secret.keyName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (secret.description && secret.description.toLowerCase().includes(searchQuery.toLowerCase()));
    
    const matchesCategory = selectedCategory === null || secret.category === selectedCategory;
    
    return matchesSearch && matchesCategory;
  });

  // Group secrets by category for better organization
  const secretsByCategory: Record<string, SystemSecret[]> = {};
  
  // Initialize categories with empty arrays
  (Array.isArray(categories) ? categories : []).forEach((category: string) => {
    secretsByCategory[category] = [];
  });
  
  // Populate categories with secrets
  filteredSecrets.forEach((secret: SystemSecret) => {
    if (!secretsByCategory[secret.category]) {
      secretsByCategory[secret.category] = [];
    }
    secretsByCategory[secret.category].push(secret);
  });

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <div>
          <h2 className="text-2xl font-bold">System Secrets Management</h2>
          <p className="text-muted-foreground">
            Manage sensitive configuration values securely. Values are masked by default for security.
          </p>
        </div>
        
        <Button
          onClick={() => setIsAddModalOpen(true)}
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white"
        >
          <Plus className="h-4 w-4" />
          Add New Secret
        </Button>
      </div>

      <Alert className="bg-amber-50 border-amber-200 dark:bg-amber-900/20 dark:border-amber-800 mb-6">
        <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-500" />
        <AlertTitle className="text-amber-800 dark:text-amber-500">Security Warning</AlertTitle>
        <AlertDescription className="text-amber-800 dark:text-amber-400">
          System secrets are sensitive configuration values. Values are masked by default. Click the eye
          icon to reveal values temporarily. Values marked as encrypted are stored securely in the database.
        </AlertDescription>
      </Alert>

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <div className="flex items-center gap-2 w-full md:w-auto">
          <div className="relative w-full md:w-80">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search secrets..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          
          <Select 
            value={selectedCategory || ""} 
            onValueChange={(value) => setSelectedCategory(value === "" ? null : value)}
          >
            <SelectTrigger className="w-full md:w-44">
              <SelectValue placeholder="Filter by category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="">All Categories</SelectItem>
              {(Array.isArray(categories) ? categories : []).map((category: string) => (
                <SelectItem key={category} value={category}>
                  <div className="flex items-center gap-2">
                    {getCategoryIcon(category)}
                    <span>{category.charAt(0).toUpperCase() + category.slice(1)}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        <Button variant="outline" onClick={() => refetch()} className="flex items-center gap-2">
          <RefreshCw className="h-4 w-4" />
          Refresh
        </Button>
      </div>

      {/* Display secrets grouped by category */}
      <div className="grid grid-cols-1 gap-6">
        {Object.entries(secretsByCategory)
          .filter(([_, secrets]) => secrets.length > 0)
          .map(([category, categorySecrets]) => (
            <Card key={category} className="overflow-hidden">
              <CardHeader className="pb-3 bg-muted/50">
                <div className="flex items-center gap-2">
                  {getCategoryIcon(category)}
                  <CardTitle>{category.charAt(0).toUpperCase() + category.slice(1)} Secrets</CardTitle>
                </div>
                <CardDescription>
                  {categorySecrets.length} secret{categorySecrets.length !== 1 ? 's' : ''}
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Key Name</TableHead>
                      <TableHead>Value</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead>Encrypted</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {categorySecrets.map((secret: SystemSecret) => (
                      <TableRow key={secret.id}>
                        <TableCell className="font-medium">
                          <div className="flex items-center gap-2">
                            <KeyRound className="h-4 w-4 text-blue-500" />
                            {secret.keyName}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <div className="relative flex-grow font-mono text-sm bg-muted/50 rounded-md px-3 py-1 max-w-[200px] truncate">
                              {showValues[secret.id] ? (
                                <span>{secret.value}</span>
                              ) : (
                                <span className="text-muted-foreground">••••••••••••••</span>
                              )}
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => toggleValueVisibility(secret.id)}
                              className="h-8 w-8 p-0"
                            >
                              {showValues[secret.id] ? (
                                <EyeOff className="h-4 w-4" />
                              ) : (
                                <Eye className="h-4 w-4" />
                              )}
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => copyToClipboard(secret.value, secret.id)}
                              className="h-8 w-8 p-0"
                              disabled={!showValues[secret.id]}
                            >
                              {copyStatus[secret.id] ? (
                                <Check className="h-4 w-4 text-green-500" />
                              ) : (
                                <Copy className="h-4 w-4" />
                              )}
                            </Button>
                          </div>
                        </TableCell>
                        <TableCell className="max-w-[200px] truncate">
                          {secret.description || <span className="text-muted-foreground italic">No description</span>}
                        </TableCell>
                        <TableCell>
                          {secret.isEncrypted ? (
                            <div className="flex items-center gap-1.5 text-green-600">
                              <Lock className="h-4 w-4" />
                              <span>Yes</span>
                            </div>
                          ) : (
                            <div className="flex items-center gap-1.5 text-muted-foreground">
                              <Unlock className="h-4 w-4" />
                              <span>No</span>
                            </div>
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                setSecretToEdit(secret);
                                setIsEditModalOpen(true);
                              }}
                              className="h-8 w-8 p-0"
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDelete(secret.id)}
                              className="h-8 w-8 p-0 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-950/20"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          ))}
      </div>

      {filteredSecrets.length === 0 && (
        <div className="flex flex-col items-center justify-center py-12 bg-muted/30 rounded-lg border border-dashed">
          <div className="flex items-center justify-center rounded-full bg-primary/10 w-16 h-16 mb-4">
            <Key className="h-8 w-8 text-primary" />
          </div>
          <h3 className="text-lg font-medium mb-2">No secrets found</h3>
          <p className="text-muted-foreground text-center max-w-md mb-6">
            {searchQuery || selectedCategory 
              ? "No secrets match your search criteria. Try adjusting your filters."
              : "You haven't added any system secrets yet. Click the button below to add your first secret."}
          </p>
          {!(searchQuery || selectedCategory) && (
            <Button
              onClick={() => setIsAddModalOpen(true)}
              className="flex items-center gap-2"
            >
              <Plus className="h-4 w-4" />
              Add New Secret
            </Button>
          )}
        </div>
      )}

      {/* Add Secret Modal */}
      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Add New System Secret</DialogTitle>
            <DialogDescription>
              Add a new configuration value to the system. Sensitive values can be encrypted.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...addForm}>
            <form onSubmit={addForm.handleSubmit(onAddSubmit)} className="space-y-4">
              <FormField
                control={addForm.control}
                name="keyName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Key Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., stripe_api_key" {...field} />
                    </FormControl>
                    <FormDescription>
                      Use snake_case for consistency.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={addForm.control}
                name="value"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Value</FormLabel>
                    <FormControl>
                      <Input placeholder="Secret value" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={addForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Describe what this secret is used for" 
                        className="resize-none"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={addForm.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a category" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {predefinedCategories.map((category) => (
                          <SelectItem key={category} value={category}>
                            <div className="flex items-center gap-2">
                              {getCategoryIcon(category)}
                              <span>{category.charAt(0).toUpperCase() + category.slice(1)}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={addForm.control}
                name="isEncrypted"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                    <div className="space-y-0.5">
                      <FormLabel>Encrypt Value</FormLabel>
                      <FormDescription>
                        Store the value in an encrypted format in the database
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              
              {/* Quick-add templates */}
              <div className="space-y-2">
                <div className="text-sm font-medium">Quick-add templates:</div>
                <div className="flex flex-wrap gap-2">
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    className="flex items-center gap-1.5 border-blue-200 bg-blue-50 text-blue-700 hover:bg-blue-100 dark:border-blue-800 dark:bg-blue-950/50 dark:text-blue-400 dark:hover:bg-blue-950"
                    onClick={() => fillWithPredefinedSecret(predefinedSecrets.find(s => s.keyName === "LUKE_WALLET_KEY")!)}
                  >
                    <Wallet className="h-4 w-4" />
                    <span>Luke Wallet Key</span>
                  </Button>
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    className="flex items-center gap-1.5 border-purple-200 bg-purple-50 text-purple-700 hover:bg-purple-100 dark:border-purple-800 dark:bg-purple-950/50 dark:text-purple-400 dark:hover:bg-purple-950"
                    onClick={() => fillWithPredefinedSecret(predefinedSecrets.find(s => s.keyName === "BSCSCAN_API_KEY")!)}
                  >
                    <Search className="h-4 w-4" />
                    <span>BSCScan API Key</span>
                  </Button>
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    className="flex items-center gap-1.5 border-green-200 bg-green-50 text-green-700 hover:bg-green-100 dark:border-green-800 dark:bg-green-950/50 dark:text-green-400 dark:hover:bg-green-950"
                    onClick={() => fillWithPredefinedSecret(predefinedSecrets.find(s => s.keyName === "STRIPE_SECRET_KEY")!)}
                  >
                    <CreditCard className="h-4 w-4" />
                    <span>Stripe Secret Key</span>
                  </Button>
                </div>
              </div>
              
              <DialogFooter className="sm:justify-end">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsAddModalOpen(false)}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                  disabled={createMutation.isPending}
                >
                  {createMutation.isPending ? (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      Adding...
                    </>
                  ) : (
                    <>Save Secret</>
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Edit Secret Modal */}
      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Edit System Secret</DialogTitle>
            <DialogDescription>
              Update this configuration value. Note that the key name cannot be changed.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...editForm}>
            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className="space-y-4">
              <FormField
                control={editForm.control}
                name="keyName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Key Name</FormLabel>
                    <FormControl>
                      <Input {...field} disabled className="bg-muted/50" />
                    </FormControl>
                    <FormDescription>
                      Key names cannot be changed.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={editForm.control}
                name="value"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Value</FormLabel>
                    <FormControl>
                      <Input placeholder="Secret value" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={editForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="Describe what this secret is used for" 
                        className="resize-none"
                        {...field} 
                        value={field.value || ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={editForm.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a category" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {predefinedCategories.map((category) => (
                          <SelectItem key={category} value={category}>
                            <div className="flex items-center gap-2">
                              {getCategoryIcon(category)}
                              <span>{category.charAt(0).toUpperCase() + category.slice(1)}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={editForm.control}
                name="isEncrypted"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm">
                    <div className="space-y-0.5">
                      <FormLabel>Encrypt Value</FormLabel>
                      <FormDescription>
                        Store the value in an encrypted format in the database
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              
              <DialogFooter className="sm:justify-end">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    setIsEditModalOpen(false);
                    setSecretToEdit(null);
                  }}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  className="bg-green-600 hover:bg-green-700 text-white"
                  disabled={updateMutation.isPending}
                >
                  {updateMutation.isPending ? (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      Updating...
                    </>
                  ) : (
                    <>Update Secret</>
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}